type FoodItem @model {
  id: ID!
  name: String!
  recommendedRestaurants: [FoodItemRecommendations] @connection(keyName: "byFoodItem", fields: ["id"])
}

# Create a join model and disable queries as you don't need them
# and can query through FoodItem.recommendedRestaurants and Restaurant.recommendedFoodItems
type FoodItemRecommendations
  @model(queries: null)
  @key(name: "byFoodItem", fields: ["foodItemID", "restaurantID"])
  @key(name: "byRestaurant", fields: ["restaurantID", "foodItemID"]) {
  id: ID!
  foodItemID: ID!
  restaurantID: ID!
  foodItem: FoodItem! @connection(fields: ["foodItemID"])
  restaurant: Restaurant! @connection(fields: ["restaurantID"])
}

type Restaurant @model {
  id: ID!
  name: String!
  address: String!
  rank: Int!
  lat: Float!
  lng: Float!
  googlePlaceId: String!
  recommendedFoodItems: [FoodItemRecommendations] @connection(keyName: "byRestaurant", fields: ["id"])
}

type Comment @model {
  id: ID!
  foodItemID: ID!
  foodItem: FoodItem @connection(fields: ["foodItemID"])
  restaurantID: ID!
  restaurant: Restaurant @connection(fields: ["restaurantID"])
  content: String!
  likes: Int!
}
